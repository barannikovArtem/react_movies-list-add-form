{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","addMovie","initialMovie","initialError","useState","setMovie","errors","setErrors","patternURL","RegExp","titleValidation","errorType","trim","imgUrlValidation","test","imdbUrlValidation","imdbIdValidation","reset","useCallback","handleChange","event","target","name","value","onSubmit","preventDefault","currentErrors","hasAnError","canSubmit","Object","values","every","el","type","placeholder","onChange","onBlur","classNames","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7735f823.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, {\n  ChangeEvent, FormEvent, useCallback, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\n\ntype Props = {\n  addMovie: (movie:Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ addMovie }) => {\n  const initialMovie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const initialError = {\n    title: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const [movie, setMovie] = useState(initialMovie);\n  const [errors, setErrors] = useState(initialError);\n\n  // eslint-disable-next-line max-len\n  const patternURL = new RegExp('(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?');\n\n  const titleValidation = () => {\n    let errorType = '';\n\n    if (!movie.title.trim()) {\n      errorType = 'Title is required!';\n    }\n\n    setErrors({\n      ...errors,\n      title: errorType,\n    });\n\n    return errorType;\n  };\n\n  const imgUrlValidation = () => {\n    let errorType = '';\n\n    if (!movie.imgUrl.trim()) {\n      errorType = 'imdbUrl if required!';\n    } else if (!patternURL.test(movie.imgUrl)) {\n      errorType = 'Please enter a valid URL!';\n    }\n\n    setErrors({\n      ...errors,\n      imgUrl: errorType,\n    });\n\n    return errorType;\n  };\n\n  const imdbUrlValidation = () => {\n    let errorType = '';\n\n    if (!movie.imdbUrl.trim()) {\n      errorType = 'imdbUrl if required!';\n    } else if (!patternURL.test(movie.imdbUrl)) {\n      errorType = 'Please enter a valid URL!';\n    }\n\n    setErrors({\n      ...errors,\n      imdbUrl: errorType,\n    });\n\n    return errorType;\n  };\n\n  const imdbIdValidation = () => {\n    let errorType = '';\n\n    if (!movie.imdbId.trim()) {\n      errorType = 'Title is required!';\n    }\n\n    setErrors({\n      ...errors,\n      imdbId: errorType,\n    });\n\n    return errorType;\n  };\n\n  const hasAnError = () => {\n    const currentErrors = { ...errors };\n\n    currentErrors.title = titleValidation();\n    currentErrors.imgUrl = imgUrlValidation();\n    currentErrors.imdbId = imdbIdValidation();\n    currentErrors.imdbUrl = imdbUrlValidation();\n\n    return currentErrors;\n  };\n\n  const reset = useCallback(() => {\n    setMovie(initialMovie);\n    setErrors(initialError);\n  }, []);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setMovie({ ...movie, [name]: value });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const currentErrors = hasAnError();\n    const canSubmit = Object.values(currentErrors).every(el => !el);\n\n    setErrors(currentErrors);\n\n    if (canSubmit) {\n      addMovie(movie);\n      reset();\n    }\n  };\n\n  return (\n    <form\n      className=\"movie-form\"\n      onSubmit={handleSubmit}\n    >\n      <h2\n        className=\"movie-form__title\"\n      >\n        Add new movie\n      </h2>\n      <label className=\"movie-form__label\">\n        <input\n          className=\"movie-form__input\"\n          name=\"title\"\n          type=\"text\"\n          placeholder=\"Enter a title\"\n          value={movie.title}\n          onChange={handleChange}\n          onBlur={titleValidation}\n        />\n      </label>\n      {errors.title && (\n        <p className=\"movie-form__error\">\n          {errors.title}\n        </p>\n      )}\n\n      <label className=\"movie-form__label\">\n        <input\n          className=\"movie-form__input\"\n          placeholder=\"Enter a description\"\n          name=\"description\"\n          type=\"text\"\n          value={movie.description}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className=\"movie-form__label\">\n        <input\n          className=\"movie-form__input\"\n          name=\"imgUrl\"\n          type=\"text\"\n          value={movie.imgUrl}\n          onChange={handleChange}\n          onBlur={imgUrlValidation}\n          placeholder=\"Enter a image URL\"\n        />\n      </label>\n      {errors.imgUrl && (\n        <p className=\"movie-form__error\">\n          {errors.imgUrl}\n        </p>\n      )}\n\n      <label className=\"movie-form__label\">\n        <input\n          className=\"movie-form__input\"\n          name=\"imdbUrl\"\n          type=\"text\"\n          value={movie.imdbUrl}\n          onChange={handleChange}\n          onBlur={imdbUrlValidation}\n          placeholder=\"Enter a imdb URL\"\n        />\n      </label>\n      {errors.imdbUrl && (\n        <p className=\"movie-form__error\">\n          {errors.imdbUrl}\n        </p>\n      )}\n\n      <label className=\"movie-form__label\">\n        <input\n          className=\"movie-form__input\"\n          name=\"imdbId\"\n          type=\"text\"\n          value={movie.imdbId}\n          onChange={handleChange}\n          onBlur={imdbIdValidation}\n          placeholder=\"Enter a imdb Id\"\n        />\n      </label>\n      {errors.imdbId && (\n        <p className=\"movie-form__error\">\n          {errors.imdbId}\n        </p>\n      )}\n      <button\n        type=\"submit\"\n        className={classNames(\n          'movie-form__submit-btn',\n        )}\n      >\n        Add new movie\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC<{}> = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}